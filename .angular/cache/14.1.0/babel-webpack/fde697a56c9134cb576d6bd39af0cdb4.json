{"ast":null,"code":"import _classCallCheck from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nexport var Subscription = /*#__PURE__*/function () {\n  function Subscription(unsubscribe) {\n    _classCallCheck(this, Subscription);\n\n    this.closed = false;\n    this._parent = null;\n    this._parents = null;\n    this._subscriptions = null;\n\n    if (unsubscribe) {\n      this._unsubscribe = unsubscribe;\n    }\n  }\n\n  _createClass(Subscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var hasErrors = false;\n      var errors;\n\n      if (this.closed) {\n        return;\n      }\n\n      var _parent = this._parent,\n          _parents = this._parents,\n          _unsubscribe = this._unsubscribe,\n          _subscriptions = this._subscriptions;\n      this.closed = true;\n      this._parent = null;\n      this._parents = null;\n      this._subscriptions = null;\n      var index = -1;\n      var len = _parents ? _parents.length : 0;\n\n      while (_parent) {\n        _parent.remove(this);\n\n        _parent = ++index < len && _parents[index] || null;\n      }\n\n      if (isFunction(_unsubscribe)) {\n        var trial = tryCatch(_unsubscribe).call(this);\n\n        if (trial === errorObject) {\n          hasErrors = true;\n          errors = errors || (errorObject.e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n        }\n      }\n\n      if (isArray(_subscriptions)) {\n        index = -1;\n        len = _subscriptions.length;\n\n        while (++index < len) {\n          var sub = _subscriptions[index];\n\n          if (isObject(sub)) {\n            var _trial = tryCatch(sub.unsubscribe).call(sub);\n\n            if (_trial === errorObject) {\n              hasErrors = true;\n              errors = errors || [];\n              var err = errorObject.e;\n\n              if (err instanceof UnsubscriptionError) {\n                errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n              } else {\n                errors.push(err);\n              }\n            }\n          }\n        }\n      }\n\n      if (hasErrors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(teardown) {\n      if (!teardown || teardown === Subscription.EMPTY) {\n        return Subscription.EMPTY;\n      }\n\n      if (teardown === this) {\n        return this;\n      }\n\n      var subscription = teardown;\n\n      switch (typeof teardown) {\n        case 'function':\n          subscription = new Subscription(teardown);\n\n        case 'object':\n          if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n            return subscription;\n          } else if (this.closed) {\n            subscription.unsubscribe();\n            return subscription;\n          } else if (typeof subscription._addParent !== 'function') {\n            var tmp = subscription;\n            subscription = new Subscription();\n            subscription._subscriptions = [tmp];\n          }\n\n          break;\n\n        default:\n          throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n\n      var subscriptions = this._subscriptions || (this._subscriptions = []);\n      subscriptions.push(subscription);\n\n      subscription._addParent(this);\n\n      return subscription;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(subscription) {\n      var subscriptions = this._subscriptions;\n\n      if (subscriptions) {\n        var subscriptionIndex = subscriptions.indexOf(subscription);\n\n        if (subscriptionIndex !== -1) {\n          subscriptions.splice(subscriptionIndex, 1);\n        }\n      }\n    }\n  }, {\n    key: \"_addParent\",\n    value: function _addParent(parent) {\n      var _parent = this._parent,\n          _parents = this._parents;\n\n      if (!_parent || _parent === parent) {\n        this._parent = parent;\n      } else if (!_parents) {\n        this._parents = [parent];\n      } else if (_parents.indexOf(parent) === -1) {\n        _parents.push(parent);\n      }\n    }\n  }]);\n\n  return Subscription;\n}();\n\nSubscription.EMPTY = function (empty) {\n  empty.closed = true;\n  return empty;\n}(new Subscription());\n\nfunction flattenUnsubscriptionErrors(errors) {\n  return errors.reduce(function (errs, err) {\n    return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n  }, []);\n} //# sourceMappingURL=Subscription.js.map","map":null,"metadata":{},"sourceType":"module"}