{"ast":null,"code":"import _classCallCheck from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _toConsumableArray from \"/Users/beata/Documents/projects/angular-university/angular-security/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  var resultSelector;\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    resultSelector = sources.pop();\n  }\n\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0];\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    return forkJoin(sources).pipe(map(function (args) {\n      return resultSelector.apply(void 0, _toConsumableArray(args));\n    }));\n  }\n\n  return new Observable(function (subscriber) {\n    return new ForkJoinSubscriber(subscriber, sources);\n  });\n}\n\nvar ForkJoinSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(ForkJoinSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(ForkJoinSubscriber);\n\n  function ForkJoinSubscriber(destination, sources) {\n    var _this;\n\n    _classCallCheck(this, ForkJoinSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.sources = sources;\n    _this.completed = 0;\n    _this.haveValues = 0;\n    var len = sources.length;\n    _this.values = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var source = sources[i];\n      var innerSubscription = subscribeToResult(_assertThisInitialized(_this), source, null, i);\n\n      if (innerSubscription) {\n        _this.add(innerSubscription);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(ForkJoinSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.values[outerIndex] = innerValue;\n\n      if (!innerSub._hasValue) {\n        innerSub._hasValue = true;\n        this.haveValues++;\n      }\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var destination = this.destination,\n          haveValues = this.haveValues,\n          values = this.values;\n      var len = values.length;\n\n      if (!innerSub._hasValue) {\n        destination.complete();\n        return;\n      }\n\n      this.completed++;\n\n      if (this.completed !== len) {\n        return;\n      }\n\n      if (haveValues === len) {\n        destination.next(values);\n      }\n\n      destination.complete();\n    }\n  }]);\n\n  return ForkJoinSubscriber;\n}(OuterSubscriber); //# sourceMappingURL=forkJoin.js.map","map":null,"metadata":{},"sourceType":"module"}